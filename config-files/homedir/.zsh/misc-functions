## Print the complete command and check correctness
_-accept-line() {
	local -a WORDS
	WORDS=( ${(z)BUFFER} )
	local -r FIRSTWORD=${WORDS[1]}
	local -r GREEN=$'\e[32m' RESET_COLORS=$'\e[0m'
	[[ "$(whence -w $FIRSTWORD 2>/dev/null)" == "${FIRSTWORD}: alias" ]] &&
	echo -n $'\n'"${GREEN}Executing: $(whence $FIRSTWORD)${RESET_COLORS}"
	zle .accept-line
}
	zle -N accept-line _-accept-line





## grep: exclude these special directories for a better matching speed
[[ -n ${commands[grep]} ]] && {
    export GREP_COLOR='7;2;32';
    export GREP_OPT='--color=auto';
    for PATTERN in .{cvs,git,hg,svn}; do
        GREP_OPT+=" --exclude-dir=${PATTERN}" 
            done
    alias grep="/usr/bin/grep $GREP_OPT"
    unset GREP_OPT
}




# less as default pager/viewer
[[ -n ${commands[less]} ]] && {
export PAGER=less
export MANPAGER=${PAGER}
}
[[ -n ${commands[vim]} ]] && export EDITOR=vim
export TAR_OPTIONS='--delay-directory-restore'
[[ -n ${commands[journalctl]} ]] && export SYSTEMD_LESS=FRXM
[[ -n ${commands[less]} ]] && export LESS=RM
[[ -n ${commands[urxvtd]} ]] && export RXVT_SOCKET=/tmp/rxvt-unicode-${EUID}-${HOST}





## for colored man page
[[ -n ${commands[less]} ]] && export LESS_TERMCAP_mb=$'\E[1;36m' \
    LESS_TERMCAP_md=$'\E[1;31m' \
    LESS_TERMCAP_me=$'\E[0m' \
    LESS_TERMCAP_se=$'\E[0m' \
    LESS_TERMCAP_so=$'\E[01;44;33m' \
    LESS_TERMCAP_ue=$'\E[0m' \
    LESS_TERMCAP_us=$'\E[1;32m'





## create a dir and cd in it
mkdirc() {
    if [[ $# -ne 1 || "${1}" == '--help' ]];then
        _-automatic-colored
        print "${bldblu}Usage:${rst} ${bldgrn}mkdirc${rst} [${bldcyn}DIRECTORY${rst}]
        ${bldgrn}mkdirc${rst} create a directory and then change the current working directory to the created directory.

        ${bldcyn}--help${rst}     help information(this screen)
        ${bldcyn}--version${rst}  print the version"
        [[ $# -ne 1 ]] && return 1
    elif [[ "${1}" == '--version' ]];then
        local VERSION=0.0
        echo "mkdirc v${VERSION}"
    elif [[ ! -d "${1}" ]];then
        _-automatic-colored
        echo -n "${grn}";mkdir -pv "${1}" && cd "${1}";echo -n "${rst}"
    else
        _-automatic-colored
        echo "${cyn}mkdirc: \`${1}\' already exists${rst}"
        cd "${1}"
    fi
}





## create a random named tmp file and cd in it
cdtmp() {
    if [[ "${1}" == '--help' || "${1}" == '-h' || $# -gt 1 ]];then
        _-automatic-colored
        echo "${bldblu}Usage:${rst} ${bldgrn}cdtmp${rst} [${bldcyn}OPTION${rst}]
        create a temporary directory and then change the current working directory to the created directory.
        ${bldcyn}-h${rst}, ${bldcyn}--help${rst}    help information(this screen)"
    else
        local dir=$(mktemp -d)
        _-automatic-colored
        echo "${grn}Executing: cd ${dir}${rst}"
        cd ${dir}
    fi
}





## print current tty
tty() {
    if [[ $# -eq 0 ]];then
        print ${TTY}
    else
        command tty $@
    fi
}





## dowload a webpage
fetch() {
    if [[ $# -ge 1 && ${1} != '--help' && ${1} != '-h' ]];then
        for i in $@;do
            curl -fL --retry 3 --retry-delay 3 --connect-timeout 7 -o ${i##*/} ${i}
        done
    else
        print 'Usage: fetch [URL]...\n\nA wrapper function for curl'
    fi
}





## List installed packages
[[ -n ${commands[package-query]} && -n ${commands[less]} ]] && pacls() {
local _if_pager
[[ -t 1 ]] && _if_pager=ptypg || _if_pager=pty
if [[ -z "${1}" || "${1}" == '-1' ]];then
    ${_if_pager} package-query -Qe --sort date
elif [[ "${1}" == '-s' ]];then
    ${_if_pager} package-query -Qe --sort size
elif [[ "${1}" == '-n' ]];then
    ${_if_pager} package-query -Qe
else
    print 'Usage: pacls [OPTION]
    pacls print the explicitly installed package list

    -1,   sort by date(default)
    -n,   sort by alphabet
    -s,   sort by package size'
fi
}





## Display help
help() {
    local HELPDIR=${HELPDIR:-/usr/share/zsh/${ZSH_VERSION}/help}
    [[ ${1} == '.' ]] && 1=dot
    [[ ${1} == ':' ]] && 1=colon
    if [[ $# -eq 0 || ${1} == '-l' || ${1} == '--help' || ${1} == '-h' ]];then
        _-automatic-colored
        [[ $# -eq 0 || ${1} == '--help' || ${1} == '-h' ]] && echo "${bldblu}Usage:${rst} ${bldcyn}help${rst} [${bldgrn}zsh-builtin-command${rst}]\n"
        ls ${HELPDIR}
        if [[ $# -eq 0 || ${1} == '--help' || ${1} == '-h' ]];then
            for n ({1..${COLUMNS}}) ; do printf '%s' -;done;echo
                echo "* ${bld}RTFM${rst}(Read the fine/f*cking manual): ${bldgrn}man what-manual-page-you-want${rst}, this is the 1st thing you should do before asking.
                * ${bld}GIYF${rst}(Google is your Friend), so please google before asking questions: ${bldgrn}elinks ${bldcyn}google.com${rst}
                * ${bld}RTFW${rst}(Read the fine wiki): The community-maintained ${bldcyn}ArchWiki${rst} is the primary resource that should be consulted if issues arise: ${bldgrn}elinks ${bldcyn}wiki.archlinux.org${rst}
                * The IRC Channel(${bldcyn}irc://irc.freenode.net/#archlinux${rst}) and the forums(${bldcyn}https://bbs.archlinux.org${rst}) are also good places for asking if an answer cannot be found elsewhere."
                [[ -t 1 ]] && echo
            fi
            return 0
        elif [[ -n ${HELPDIR:-} && -r ${HELPDIR}/${1} && ${1} != compctl ]];then
            if [[ -n ${commands[${PAGER:-less}]} ]];then
                ${PAGER:-less} ${HELPDIR}/${1}
            else
                cat ${HELPDIR}/${1}
            fi
            return $?
        else
            man $@
        fi
}





## Create backup file
~() {
_-intro() {
    _-automatic-colored
    echo "${bldblu}Usage:${rst} ${bldgrn}~${rst} [${bldcyn}FILE${rst}]
    backup a file or directory using cp(1)

    The target file name is the original name plus a time stamp attached.(%Y%m%d%H%M%S)"
}
if [[ $# -eq 0 && ${PWD} != ${HOME} ]];then
    cd ${HOME}
elif [[ $# -eq 1 ]];then
    _-automatic-colored
    if [[ ! -e ${1} ]];then
        echo "${bldred}==> ${bld}Aborted: File ${1} doesn't exist${rst}\n"
        _-intro
        return 1
    elif [[ ! -f ${1} ]];then
        echo "${bldred}==> ${bld}Aborted: ${1} is not a regular file${rst}"
        return 1
    elif [[ ! -r ${1} ]];then
        echo "${bldred}==> ${bld}Aborted: File is unaccessible${rst}"
        return 1
    elif [[ ! -s ${1} ]];then
        echo "${bldblu}==> ${bld}Cancelled: This is a zero-byte file, just why do you want to backup it?${rst}"
        return 2
    else
        local DESTNATIONFILENAME="${1}~`strftime '%Y%m%d%H%M%S' ${EPOCHSECONDS}`"
        cp -b "${1}" "${DESTNATIONFILENAME}" && echo "${bldgrn}==> ${bld}Finish writing backup: ${DESTNATIONFILENAME}${rst}"
    fi
else
    _-intro
fi
unset -f _-intro
}





## Sudo su insted of su, plus warning
su() {
    if [[ ${EUID} -ne 0 && -n ${commands[sudo]} ]];then
        print "\e[1;32m==> \e[1;37mNote: Never run \e[1;31msu\e[1;37m directly except the \e[1;32msudo\e[1;37m is unusable.\e[0m (use \e[1;32munset -f su\e[0m to disable this automatic notification)"
        print "\e[1;34m==> \e[0;32mExecuting: sudo su\e[0m"
        sudo -- su $@
    else
        command su $@
    fi
}





## Print availible disk space
df() {
    if [[ $# -eq 0 ]];then
        command df -h
    else
        command df $@
    fi
}





## Print files size
[[ -n ${commands[${PAGER:-less}]} ]] && du() {
if [[ $# -eq 0 && -t 0 ]];then
    command du -h | ${PAGER:-less}
else
    command du $@
fi
}





## Show who is logged on and what they are doing
[[ -n ${commands[w]} ]] && w() {
if [[ $# -eq 0 ]];then
    command w -f
else
    command w $@
fi
}





## Show who is logged on
[[ -n ${commands[who]} ]] && who() {
if [[ $# -eq 0 ]];then
    command who -HprtTud
else
    command who $@
fi
}





## History
[[ -n ${commands[${PAGER:-less}]} ]] && hist() {
if [[ $# -eq 0 && -t 0 ]];then
    fc -il 1 | ${PAGER:-less}
else
    builtin history $@
fi
}







## Print terminal display infos
rsz() {
    if [[ -t 0 && $# -eq 0 ]];then
        local IFS='[;' escape geometry x y
        print -n '\e7\e[r\e[999;999H\e[6n\e8'
        read -sd R escape geometry
        x=${geometry##*;} y=${geometry%%;*}
        if [[ ${COLUMNS} -eq ${x} && ${LINES} -eq ${y} ]];then
            print "${TERM} ${x}x${y}"
        else
            print "${COLUMNS}x${LINES} -> ${x}x${y}"
            stty cols ${x} rows ${y}
        fi
    else
        [[ -n ${commands[repo-elephant]} ]] && repo-elephant || print 'Usage: rsz'
    fi
}





_-automatic-colored() {
    if [[ ${1} == unset || ! -t 1 ]];then
        unset rst bld bldwht bldblk bldred bldgrn bldylw bldblu bldcyn blk red grn ylw blu cyn gry
    elif [[ -t 1 ]];then
        rst="${reset_color}"
        bld="${fg_bold[default]}"
        bldwht="${fg_bold[white]}"
        bldblk="$fg_bold[black]"
        bldred="$fg_bold[red]"
        bldgrn="$fg_bold[green]"
        bldylw="$fg_bold[yellow]"
        bldblu="$fg_bold[blue]"
        bldmgt="${fg_bold[magenta]}"
        bldcyn="$fg_bold[cyan]"
        gry="${fg[white]}"
        blk="$fg[black]"
        red="$fg[red]"
        grn="$fg[green]"
        ylw="$fg[yellow]"
        blu="$fg[blue]"
        mgt="${fg[magenta]}"
        cyn="$fg[cyan]"
    fi
}





## Extract lots of archive types
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1    ;;
            *.tar.gz)    tar xvzf $1    ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xvf $1     ;;
            *.tbz2)      tar xvjf $1    ;;
            *.tgz)       tar xvzf $1    ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


    



## Terminal emulator title settings ##
case ${TERM} in
    xterm*|rxvt*|ansi)
        _default_terminal_title() {
            print -n '\e]0;'${(%):-'%n@%m'}'\a'
        }
        _command_terminal_title() {
            setopt local_options extended_glob
            print -n '\e]0;'${1[(wr)^(*=*|command|sudo|ssh|rake|i386|x86_64|linux32|linux64|pty|ptypg|stdoutisatty|unbuffer|me|proxychains|grc|rlwrap|-*)]:gs/%/%%}${(%):-' - %n@%m'}'\a'
        }
        add-zsh-hook precmd _default_terminal_title
        add-zsh-hook preexec _command_terminal_title ;;
esac








#----- Motion in command prompt
    ## ZLE
        if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} ));then
        zle-line-init() {
            echoti smkx
        }
        zle-line-finish() {
            echoti rmkx
        }
        zle -N zle-line-init
        zle -N zle-line-finish
        fi
    ## C-x,C-e: edit the current command line in ${EDITOR}
        autoload -Uz edit-command-line
        zle -N edit-command-line
        bindkey '^x^e' edit-command-line

    ## up: match history forward
        [[ -n ${terminfo[kcuu1]} ]] && bindkey ${terminfo[kcuu1]} up-line-or-search
        bindkey '^k' up-line-or-search        # vim motion
    ## down: match history backward
        [[ -n ${terminfo[kcud1]} ]] && bindkey ${terminfo[kcud1]} down-line-or-search
        bindkey '^j' down-line-or-search      # vim motion
    ## home: go to beginning of line
        [[ -n ${terminfo[khome]} ]] && bindkey ${terminfo[khome]} beginning-of-line
    ## end: go to end of line
        [[ -n ${terminfo[kend]} ]] && bindkey ${terminfo[kend]} end-of-line
    ## perform history expansion and insert a space into the buffer; this is intended to be bound to space
        bindkey ' ' magic-space

    ## C-right: move forward one word
        bindkey '^[[1;5C' forward-word
    ## C-left: move backward one word
        bindkey '^[[1;5D' backward-word
    ## S-tab: move through the completion menu backwards
        [[ -n ${terminfo[kcbt]} ]] && bindkey ${terminfo[kcbt]} reverse-menu-complete
    ## del: delete forward
        [[ -n ${terminfo[kdch1]} ]] && bindkey ${terminfo[kdch1]} delete-char
    ## C-x,C-h: This is missing from the emacs keymap, but not from the vi one
    bindkey '^x^h' _complete_help
