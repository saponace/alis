set timeoutlen=1000                   " set change from insert mode to normal mode immediate to 1s
let g:spf13_no_autochdir = 1          " do not change vim working dir when opening a file in  different dir
nmap <leader>i ggVG=                  " Indent the whole file
nmap <C-l> <C-l>:nohl<CR>             " Remove highlight search
cmap cwd lcd %:p:h<CR>                " Change working directory to that of the current file
cmap w!! w !sudo tee % >/dev/null     " For when you forget to sudo.. Really Write the file.
let g:ctrlp_working_path_mode = 0


" Sharing clpiboard with xclip
    vmap <leader>y :!xclip -f<CR>
    nmap <leader>p :r !xclip -o<CR>
 

" Expanding snippets
    imap <C-o> <Plug>(neosnippet_expand_or_jump)

" line wraping
    set wrap                              " automatic line 'return' when too long
    set linebreak                         " do not cut word
    set nolist                            " lists can be cut


"arrow keys do not do anything in normal mode
    noremap <Up> <NOP>
    noremap <Down> <NOP>
    noremap <Left> <NOP>
    noremap <Right> <NOP>


"move lines up/down with Ctrl+arrows
    nnoremap <C-j> :m .+1<CR>==
    nnoremap <C-k> :m .-2<CR>==
    vnoremap <C-j> :m '>+1<CR>gv=gv
    vnoremap <C-k> :m '<-2<CR>gv=gv


" Moving throw windows
	set splitbelow                    " put window created on a split below
	set splitright                    " put window created on a split on the right
    noremap <A-h> :wincmd h<CR> " focus left window
    noremap <A-j> :wincmd j<CR> " focus down window
    noremap <A-k> :wincmd k<CR> " focus up window
    noremap <A-l> :wincmd l<CR> " focus right window

    noremap <silent> <leader>h :wincmd h<CR> " focus left window
    noremap <silent> <leader>j :wincmd j<CR> " focus down window
    noremap <silent> <leader>k :wincmd k<CR> " focus up window
    noremap <silent> <leader>l :wincmd l<CR> " focus right window


" Resizing windows
    noremap <A-=> <C-w>= 
    noremap <A-_> <C-w>_ <C-w>|
    noremap <A-H> <C-w>< " Horizontally shorten window
    noremap <A-J> <C-w>- " Vertically shorten window
    noremap <A-K> <C-w>+ " Vertically enlarge window
    noremap <A-L> <C-w>> " Horizontally enlarge window

    noremap <silent> <leader>H <C-w>< " Horizontally shorten window
    noremap <silent> <leader>J <C-w>- " Vertically shorten window
    noremap <silent> <leader>K <C-w>+ " Vertically enlarge window
    noremap <silent> <leader>L <C-w>> " Horizontally enlarge window


" Code folding options
    "set foldmethod=syntax
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>

    
" Colorscheme
    colorscheme solarized                 " set the default colorscheme
    " its normal that the colors do not macth with the real solarized theme.
    " modify .Xresources to do so

" Airline
    let g:airline_theme='murmur'       "use murmur as default airline theme
	if !exists('g:airline_symbols')
        let g:airline_symbols = {}
	endif
    "let g:airline_left_sep = '▶'
    let g:airline_left_sep = ' '
	"let g:airline_right_sep = '◀'
	let g:airline_right_sep = ' '
	let g:airline_symbols.linenr = '␊'
	let g:airline_symbols.linenr = '␤'
	let g:airline_symbols.linenr = '¶'
	"let g:airline_symbols.branch = '⎇'
	let g:airline_symbols.paste = 'ρ'
	let g:airline_symbols.paste = 'Þ'
	"let g:airline_symbols.paste = '∥'
	let g:airline#extensions#tabline#enabled = 1
	let g:airline_symbols.whitespace = 'Ξ'

    
" EasyMotion
    " easymotion search highlight color same as vim search highligh color
    hi link EasyMotionShade Comment
    " Override vim built-it search
        map  / <Plug>(easymotion-sn)
        omap / <Plug>(easymotion-tn)
    " add hjkl move
        map <Leader><Leader>l <Plug>(easymotion-lineforward)
        map <Leader><Leader>j <Plug>(easymotion-j)
        map <Leader><Leader>k <Plug>(easymotion-k)
        map <Leader><Leader>h <Plug>(easymotion-linebackward)
    " keep cursor colum when JK motion
        let g:EasyMotion_startofline = 0


